install.packages(fredr)
install.packages("fredr")
library(usethis)
usethis::edit_r_environ()
Sys.getenv("FRED_API_KEY")
fredr_get_key()
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(fredr, dplyr, ggplot2)
# Setting up the Homework
# Load necessary Packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(fredr, dplyr, ggplot2)
# Retrieve the Data from FRED using their API
## (You need an API Key to retrieve the Data, mine is set in my R enviornment as a variable)
# Setting up the Homework
# Load necessary Packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(fredr, dplyr, ggplot2)
# Retrieve the Data from FRED using their API ----
### (You need an API Key to retrieve the Data, feel free to use mine for this "8af1b2f98eef41dfe4b5ff6ffce1bbb0")
# Define sample window
start_date <- as.Date("2000-01-01")
end_date   <- as.Date("2019-12-31")
# 1. Germany industrial activity index (monthly, Seasonally Adjusted)
industrial <- fredr(
series_id         = "DEUPROINDMISMEI",
observation_start = start_date,
observation_end   = end_date,
frequency         = "m"
)
# 2. Retrieve BAML High-Yield OAS (aggregated to monthly avg., no SA needed)
credit_spread <- fredr(
series_id           = "BAMLHE00EHYIOAS",
observation_start   = start_date,
observation_end     = end_date,
frequency            = "m",       # monthly frequency
aggregation_method   = "avg"      # average of daily values
)
# 3. Germany CPI (monthly, again, no SA needed)
cpi_raw <- fredr(
series_id         = "DEUCPIALLMINMEI",
observation_start = start_date,
observation_end   = end_date,
frequency         = "m"
)
## 3.1 Create monthly inflation rates from raw CPI data
inflation <- cpi_raw %>%
arrange(date) %>%
mutate(
m_o_m_inflation = 100 * (value / lag(value) - 1)
)
# Inspecting data briefly
head(industrial)
head(inflation)
head(credit_spread)
head(industrial)
head(inflation)
head(credit_spread)
# Plot all three Graphs in levels before transformations
# Combine into long format
data_raw <- bind_rows(
credit_spread %>% select(date, value) %>% mutate(series = "High-Yield OAS (bps)"),
industrial   %>% select(date, value) %>% mutate(series = "Industrial Production Index"),
cpi_raw      %>% select(date, value) %>% mutate(series = "CPI Level (Germany)")
)
# Plot all three series in raw levels
ggplot(data_raw, aes(x = date, y = value)) +
geom_line(size = 0.7) +
facet_wrap(~ series, scales = "free_y", ncol = 1) +
scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
labs(
title   = "Raw Levels of Key Time Series (2000-01 to 2019-12)",
x       = "Date",
y       = "Level",
caption = "Source: FRED"
) +
theme_minimal(base_size = 12) +
theme(
plot.title     = element_text(face = "bold", size = 14, hjust = 0.5),
strip.text     = element_text(face = "bold", size = 12),
axis.text.x    = element_text(angle = 45, hjust = 1),
axis.title.y   = element_blank(),
plot.caption   = element_text(size = 8, hjust = 1)
)
# Plot all three Graphs in levels before transformations
# Combine into long format
data_raw <- bind_rows(
credit_spread %>% select(date, value) %>% mutate(series = "High-Yield OAS (bps)"),
industrial   %>% select(date, value) %>% mutate(series = "Industrial Production Index"),
cpi_raw      %>% select(date, value) %>% mutate(series = "CPI Level (Germany)")
)
# Plot all three series in raw levels
ggplot(data_raw, aes(x = date, y = value)) +
geom_line(size = 0.7) +
facet_wrap(~ series, scales = "free_y", ncol = 1) +
scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
labs(
title   = "Raw Levels of Key Time Series (2000-01 to 2019-12)",
x       = "Date",
y       = "Level",
caption = "Source: FRED"
) +
theme_minimal(base_size = 12) +
theme(
plot.title     = element_text(face = "bold", size = 14, hjust = 0.5),
strip.text     = element_text(face = "bold", size = 12),
axis.text.x    = element_text(angle = 45, hjust = 1),
axis.title.y   = element_blank(),
plot.caption   = element_text(size = 8, hjust = 1)
)
