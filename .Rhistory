data_industrial <- data_raw %>% filter(series == "Industrial Production")
plot_industrial_production <- ggplot(data_industrial, aes(x = date, y = value)) +
geom_line(color = series_colors["Industrial Production"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Industrial Production Volume (Index 2015=100)",
breaks = create_nice_breaks(min(data_industrial$value), max(data_industrial$value), n = 6)
) +
labs(
title   = "Industrial Production Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUPROINDMISMEI)"
) +
theme_academic_individual()
print(plot_industrial_production)
# Save Credit Spread plot
ggsave("industrial_production_plot.pdf", plot_industrial_production, width = 7, height = 5)
# Plot 3: Consumer Price Index
data_cpi <- data_raw %>% filter(series == "Consumer Price Index")
plot_cpi <- ggplot(data_cpi, aes(x = date, y = value)) +
geom_line(color = series_colors["Consumer Price Index"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Harmonized CPI (Index 2015=100)",
breaks = create_nice_breaks(min(data_cpi$value), max(data_cpi$value), n = 6)
) +
labs(
title   = "Consumer Price Index Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUCPIALLMINMEI)"
) +
theme_academic_individual()
print(plot_cpi)
# Save CPI Plot
ggsave("cpi_plot.pdf", plot_cpi, width = 7, height = 5)
# Convert your ▸$value columns to ts objects
industrial_ts    <- ts(industrial$value,    start = c(2000, 1), freq = 12)
credit_spread_ts <- ts(credit_spread$value, start = c(2000, 1), freq = 12)
cpi_ts           <- ts(cpi_raw$value,       start = c(2000, 1), freq = 12)
# 1. Industrial Production (trend + break)
## ADF with trend
adf_ip <- ur.df(industrial_ts, type = "trend", selectlags = "BIC")
pacman::p_load(fredr, dplyr, ggplot2, patchwork, urca, tseries, zoo)
# Convert your ▸$value columns to ts objects
industrial_ts    <- ts(industrial$value,    start = c(2000, 1), freq = 12)
credit_spread_ts <- ts(credit_spread$value, start = c(2000, 1), freq = 12)
cpi_ts           <- ts(cpi_raw$value,       start = c(2000, 1), freq = 12)
# 1. Industrial Production (trend + break)
## ADF with trend
adf_ip <- ur.df(industrial_ts, type = "trend", selectlags = "BIC")
summary(adf_ip)
## Phillips–Perron with trend
pp_ip <- ur.pp(industrial_ts, type = "Z-tau", model = "trend", lags = "short")
summary(pp_ip)
## DF-GLS with trend
dfgls_ip <- ur.ers(industrial_ts, type = "DF-GLS", model = "trend", lag.max = 12)
summary(dfgls_ip)
## KPSS (null = trend-stationary)
kpss_ip <- kpss.test(industrial_ts, null = "Trend")
kpss_ip
## Zivot‐Andrews (one structural break, both intercept & trend)
za_ip <- ur.za(industrial_ts, model = "both", lag = 4)
summary(za_ip)
# 2. Credit Spread (level only)
## ADF with drift
adf_cs <- ur.df(credit_spread_ts, type = "drift", selectlags = "BIC")
summary(adf_cs)
## Phillips–Perron with constant
pp_cs <- ur.pp(credit_spread_ts, type = "Z-tau", model = "constant", lags = "short")
summary(pp_cs)
## DF-GLS with constant
dfgls_cs <- ur.ers(credit_spread_ts, type = "DF-GLS", model = "constant", lag.max = 12)
summary(dfgls_cs)
## KPSS (null = level-stationary)
kpss_cs <- kpss.test(credit_spread_ts, null = "Level")
kpss_cs
# 3. CPI (strong trend)
## ADF with trend
adf_cpi <- ur.df(cpi_ts, type = "trend", selectlags = "BIC")
summary(adf_cpi)
## Phillips–Perron with trend
pp_cpi <- ur.pp(cpi_ts, type = "Z-tau", model = "trend", lags = "short")
summary(pp_cpi)
## DF-GLS with trend
dfgls_cpi <- ur.ers(cpi_ts, type = "DF-GLS", model = "trend", lag.max = 12)
summary(dfgls_cpi)
## KPSS (null = trend-stationary)
kpss_cpi <- kpss.test(cpi_ts, null = "Trend")
kpss_cpi
## Exercise 1: Plot each time-series in levels before applying any transformations, clearly indicating data sources
# Create a custom template for plots ----
theme_academic_individual <- function(base_size = 12) {
theme_bw(base_size = base_size) + # theme_bw or theme_classic are good academic starting points
theme(
plot.title          = element_text(face = "bold", size = rel(1.2), hjust = 0.5),
plot.subtitle       = element_text(size = rel(0.9), hjust = 0.5, margin = margin(b = 10)),
axis.title.x        = element_text(size = rel(1.0), margin = margin(t = 10)),
axis.title.y        = element_text(size = rel(1.0), margin = margin(r = 10)),
axis.text           = element_text(size = rel(0.9)),
panel.grid.minor    = element_blank(),
panel.grid.major    = element_line(color = "grey85", linewidth = 0.4),
plot.caption        = element_text(size = rel(0.8), hjust = 0, margin = margin(t = 10)),
plot.margin         = margin(10, 15, 10, 10) # t, r, b, l
)
}
# Function to create nice axisbreaks for every plot automatically ---
create_nice_breaks <- function(min_val, max_val, n = 5) {
pretty(c(min_val, max_val), n)
}
# Create and save individual plots ----
# Plot 1: Credit Spread
data_credit <- data_raw %>% filter(series == "Credit Spread")
plot_credit_spread <- ggplot(data_credit, aes(x = date, y = value)) +
geom_line(color = series_colors["Credit Spread"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)), # Consistent x-axis range
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "ICE BofA Euro High Yield Index Option-Adjusted Spread (Basis Points)",
breaks = create_nice_breaks(min(data_credit$value), max(data_credit$value), n = 6) # More breaks
) +
labs(
title   = "Credit Spread Time Series (2000-2019)", # More focused title
x       = "Date",
caption = "Source: FRED (BAMLHE00EHYIOAS)"
) +
theme_academic_individual()
print(plot_credit_spread)
# Save Credit Spread Plot
ggsave("credit_spread_plot.pdf", plot_credit_spread, width = 7, height = 5)
# Plot 2: Industrial Production
data_industrial <- data_raw %>% filter(series == "Industrial Production")
plot_industrial_production <- ggplot(data_industrial, aes(x = date, y = value)) +
geom_line(color = series_colors["Industrial Production"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Industrial Production Volume (Index 2015=100)",
breaks = create_nice_breaks(min(data_industrial$value), max(data_industrial$value), n = 6)
) +
labs(
title   = "Industrial Production Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUPROINDMISMEI)"
) +
theme_academic_individual()
print(plot_industrial_production)
# Save Credit Spread plot
ggsave("industrial_production_plot.pdf", plot_industrial_production, width = 7, height = 5)
# Plot 3: Consumer Price Index
data_cpi <- data_raw %>% filter(series == "Consumer Price Index")
plot_cpi <- ggplot(data_cpi, aes(x = date, y = value)) +
geom_line(color = series_colors["Consumer Price Index"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Harmonized CPI (Index 2015=100)",
breaks = create_nice_breaks(min(data_cpi$value), max(data_cpi$value), n = 6)
) +
labs(
title   = "Consumer Price Index Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUCPIALLMINMEI)"
) +
theme_academic_individual()
print(plot_cpi)
# Save CPI Plot
ggsave("cpi_plot.pdf", plot_cpi, width = 7, height = 5)
## Exercise 1: Plot each time-series in levels before applying any transformations, clearly indicating data sources
# Combine data into long format
data_raw <- bind_rows(
credit_spread %>%
select(date, value) %>%
mutate(series    = "Credit Spread",
full_name = "ICE BofA Euro High Yield Index Option-Adjusted Spread"),
industrial %>%
select(date, value) %>%
mutate(series    = "Industrial Production",
full_name = "Germany: Industrial Production Volume (Excl. Construction)"),
cpi_raw %>%
select(date, value) %>%
mutate(series    = "Consumer Price Index",
full_name = "Germany: Harmonized Consumer Price Index (HICP, All Items)")
)
# Create a custom template for plots ----
theme_academic_individual <- function(base_size = 12) {
theme_bw(base_size = base_size) + # theme_bw or theme_classic are good academic starting points
theme(
plot.title          = element_text(face = "bold", size = rel(1.2), hjust = 0.5),
plot.subtitle       = element_text(size = rel(0.9), hjust = 0.5, margin = margin(b = 10)),
axis.title.x        = element_text(size = rel(1.0), margin = margin(t = 10)),
axis.title.y        = element_text(size = rel(1.0), margin = margin(r = 10)),
axis.text           = element_text(size = rel(0.9)),
panel.grid.minor    = element_blank(),
panel.grid.major    = element_line(color = "grey85", linewidth = 0.4),
plot.caption        = element_text(size = rel(0.8), hjust = 0, margin = margin(t = 10)),
plot.margin         = margin(10, 15, 10, 10) # t, r, b, l
)
}
# Function to create nice axisbreaks for every plot automatically ---
create_nice_breaks <- function(min_val, max_val, n = 5) {
pretty(c(min_val, max_val), n)
}
# Create and save individual plots ----
# Plot 1: Credit Spread
data_credit <- data_raw %>% filter(series == "Credit Spread")
plot_credit_spread <- ggplot(data_credit, aes(x = date, y = value)) +
geom_line(color = series_colors["Credit Spread"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)), # Consistent x-axis range
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "ICE BofA Euro High Yield Index Option-Adjusted Spread (Basis Points)",
breaks = create_nice_breaks(min(data_credit$value), max(data_credit$value), n = 6) # More breaks
) +
labs(
title   = "Credit Spread Time Series (2000-2019)", # More focused title
x       = "Date",
caption = "Source: FRED (BAMLHE00EHYIOAS)"
) +
theme_academic_individual()
print(plot_credit_spread)
# Save Credit Spread Plot
ggsave("credit_spread_plot.pdf", plot_credit_spread, width = 7, height = 5)
# Plot 2: Industrial Production
data_industrial <- data_raw %>% filter(series == "Industrial Production")
plot_industrial_production <- ggplot(data_industrial, aes(x = date, y = value)) +
geom_line(color = series_colors["Industrial Production"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Industrial Production Volume (Index 2015=100)",
breaks = create_nice_breaks(min(data_industrial$value), max(data_industrial$value), n = 6)
) +
labs(
title   = "Industrial Production Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUPROINDMISMEI)"
) +
theme_academic_individual()
print(plot_industrial_production)
# Save Credit Spread plot
ggsave("industrial_production_plot.pdf", plot_industrial_production, width = 7, height = 5)
# Plot 3: Consumer Price Index
data_cpi <- data_raw %>% filter(series == "Consumer Price Index")
plot_cpi <- ggplot(data_cpi, aes(x = date, y = value)) +
geom_line(color = series_colors["Consumer Price Index"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Harmonized CPI (Index 2015=100)",
breaks = create_nice_breaks(min(data_cpi$value), max(data_cpi$value), n = 6)
) +
labs(
title   = "Consumer Price Index Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUCPIALLMINMEI)"
) +
theme_academic_individual()
print(plot_cpi)
# Save CPI Plot
ggsave("cpi_plot.pdf", plot_cpi, width = 7, height = 5)
## Exercise 1: Plot each time-series in levels before applying any transformations, clearly indicating data sources
# Combine data into long format
data_raw <- bind_rows(
credit_spread %>%
select(date, value) %>%
mutate(series    = "Credit Spread",
full_name = "ICE BofA Euro High Yield Index Option-Adjusted Spread"),
industrial %>%
select(date, value) %>%
mutate(series    = "Industrial Production",
full_name = "Germany: Industrial Production Volume (Excl. Construction)"),
cpi_raw %>%
select(date, value) %>%
mutate(series    = "Consumer Price Index",
full_name = "Germany: Harmonized Consumer Price Index (HICP, All Items)")
)
# Create a custom template for plots ----
theme_academic_individual <- function(base_size = 12) {
theme_bw(base_size = base_size) + # theme_bw or theme_classic are good academic starting points
theme(
plot.title          = element_text(face = "bold", size = rel(1.2), hjust = 0.5),
plot.subtitle       = element_text(size = rel(0.9), hjust = 0.5, margin = margin(b = 10)),
axis.title.x        = element_text(size = rel(1.0), margin = margin(t = 10)),
axis.title.y        = element_text(size = rel(1.0), margin = margin(r = 10)),
axis.text           = element_text(size = rel(0.9)),
panel.grid.minor    = element_blank(),
panel.grid.major    = element_line(color = "grey85", linewidth = 0.4),
plot.caption        = element_text(size = rel(0.8), hjust = 0, margin = margin(t = 10)),
plot.margin         = margin(10, 15, 10, 10) # t, r, b, l
)
}
# Function to create nice axisbreaks for every plot automatically ---
create_nice_breaks <- function(min_val, max_val, n = 5) {
pretty(c(min_val, max_val), n)
}
# Create and save individual plots ----
# Plot 1: Credit Spread
data_credit <- data_raw %>% filter(series == "Credit Spread")
plot_credit_spread <- ggplot(data_credit, aes(x = date, y = value)) +
geom_line(color = series_colors["Credit Spread"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)), # Consistent x-axis range
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "ICE BofA Euro High Yield Index Option-Adjusted Spread (Basis Points)",
breaks = create_nice_breaks(min(data_credit$value), max(data_credit$value), n = 6) # More breaks
) +
labs(
title   = "Credit Spread Time Series (2000-2019)", # More focused title
x       = "Date",
caption = "Source: FRED (BAMLHE00EHYIOAS)"
) +
theme_academic_individual()
print(plot_credit_spread)
# Save Credit Spread Plot
ggsave("credit_spread_plot.pdf", plot_credit_spread, width = 7, height = 5)
# Plot 2: Industrial Production
data_industrial <- data_raw %>% filter(series == "Industrial Production")
plot_industrial_production <- ggplot(data_industrial, aes(x = date, y = value)) +
geom_line(color = series_colors["Industrial Production"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Industrial Production Volume (Index 2015=100)",
breaks = create_nice_breaks(min(data_industrial$value), max(data_industrial$value), n = 6)
) +
labs(
title   = "Industrial Production Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUPROINDMISMEI)"
) +
theme_academic_individual()
print(plot_industrial_production)
# Save Credit Spread plot
ggsave("industrial_production_plot.pdf", plot_industrial_production, width = 7, height = 5)
# Plot 3: Consumer Price Index
data_cpi <- data_raw %>% filter(series == "Consumer Price Index")
plot_cpi <- ggplot(data_cpi, aes(x = date, y = value)) +
geom_line(color = series_colors["Consumer Price Index"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Harmonized CPI (Index 2015=100)",
breaks = create_nice_breaks(min(data_cpi$value), max(data_cpi$value), n = 6)
) +
labs(
title   = "Consumer Price Index Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUCPIALLMINMEI)"
) +
theme_academic_individual()
print(plot_cpi)
# Save CPI Plot
ggsave("cpi_plot.pdf", plot_cpi, width = 7, height = 5)
## Exercise 1: Plot each time-series in levels before applying any transformations, clearly indicating data sources
# Combine data into long format
data_raw <- bind_rows(
credit_spread %>%
select(date, value) %>%
mutate(series    = "Credit Spread",
full_name = "ICE BofA Euro High Yield Index Option-Adjusted Spread"),
industrial %>%
select(date, value) %>%
mutate(series    = "Industrial Production",
full_name = "Germany: Industrial Production Volume (Excl. Construction)"),
cpi_raw %>%
select(date, value) %>%
mutate(series    = "Consumer Price Index",
full_name = "Germany: Harmonized Consumer Price Index (HICP, All Items)")
)
# Set color palette
series_colors <- c(
"Credit Spread"        = "#1f77b4", # Example color (blue)
"Industrial Production" = "#ff7f0e", # Example color (orange)
"Consumer Price Index"  = "#2ca02c"  # Example color (green)
)
# Create a custom template for plots ----
theme_academic_individual <- function(base_size = 12) {
theme_bw(base_size = base_size) + # theme_bw or theme_classic are good academic starting points
theme(
plot.title          = element_text(face = "bold", size = rel(1.2), hjust = 0.5),
plot.subtitle       = element_text(size = rel(0.9), hjust = 0.5, margin = margin(b = 10)),
axis.title.x        = element_text(size = rel(1.0), margin = margin(t = 10)),
axis.title.y        = element_text(size = rel(1.0), margin = margin(r = 10)),
axis.text           = element_text(size = rel(0.9)),
panel.grid.minor    = element_blank(),
panel.grid.major    = element_line(color = "grey85", linewidth = 0.4),
plot.caption        = element_text(size = rel(0.8), hjust = 0, margin = margin(t = 10)),
plot.margin         = margin(10, 15, 10, 10) # t, r, b, l
)
}
# Function to create nice axisbreaks for every plot automatically ---
create_nice_breaks <- function(min_val, max_val, n = 5) {
pretty(c(min_val, max_val), n)
}
# Create and save individual plots ----
# Plot 1: Credit Spread
data_credit <- data_raw %>% filter(series == "Credit Spread")
plot_credit_spread <- ggplot(data_credit, aes(x = date, y = value)) +
geom_line(color = series_colors["Credit Spread"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)), # Consistent x-axis range
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "ICE BofA Euro High Yield Index Option-Adjusted Spread (Basis Points)",
breaks = create_nice_breaks(min(data_credit$value), max(data_credit$value), n = 6) # More breaks
) +
labs(
title   = "Credit Spread Time Series (2000-2019)", # More focused title
x       = "Date",
caption = "Source: FRED (BAMLHE00EHYIOAS)"
) +
theme_academic_individual()
print(plot_credit_spread)
# Save Credit Spread Plot
ggsave("credit_spread_plot.pdf", plot_credit_spread, width = 7, height = 5)
# Plot 2: Industrial Production
data_industrial <- data_raw %>% filter(series == "Industrial Production")
plot_industrial_production <- ggplot(data_industrial, aes(x = date, y = value)) +
geom_line(color = series_colors["Industrial Production"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Industrial Production Volume (Index 2015=100)",
breaks = create_nice_breaks(min(data_industrial$value), max(data_industrial$value), n = 6)
) +
labs(
title   = "Industrial Production Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUPROINDMISMEI)"
) +
theme_academic_individual()
print(plot_industrial_production)
# Save Credit Spread plot
ggsave("industrial_production_plot.pdf", plot_industrial_production, width = 7, height = 5)
# Plot 3: Consumer Price Index
data_cpi <- data_raw %>% filter(series == "Consumer Price Index")
plot_cpi <- ggplot(data_cpi, aes(x = date, y = value)) +
geom_line(color = series_colors["Consumer Price Index"], linewidth = 0.8) +
scale_x_date(
date_breaks = "2 years",
date_labels = "%Y",
limits      = c(min(data_raw$date), max(data_raw$date)),
expand      = c(0.01, 0.01)
) +
scale_y_continuous(
name   = "Germany: Harmonized CPI (Index 2015=100)",
breaks = create_nice_breaks(min(data_cpi$value), max(data_cpi$value), n = 6)
) +
labs(
title   = "Consumer Price Index Time Series (2000-2019)",
x       = "Date",
caption = "Source: FRED (DEUCPIALLMINMEI)"
) +
theme_academic_individual()
print(plot_cpi)
# Save CPI Plot
ggsave("cpi_plot.pdf", plot_cpi, width = 7, height = 5)
git rm -r --cached Homework_Solution_cache/
git rm -r --cached Homework_Solution_cache/
